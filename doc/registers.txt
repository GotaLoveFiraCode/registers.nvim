registers                                                            *registers*
    @meta

    Fields: ~
        {options}  (options)


================================================================================
Introduction                                                             *intro*

Registers.nvim is a minimal but very configurable Neovim plugin.

Almost everything can be configured using the mandatory `registers.setup({})` method.

`packer.nvim` minimal setup:
>
use {
  "tversteeg/registers.nvim",
  config = function()
    require("registers").setup()
  end
}
<

Keys can be bound using functions, to make it easier for use I've made all functions except `registers.setup()` return callback functions that can be configured and passed to fields in the `bind_keys` example.

For example, to apply a delay of a second after selecting the register with it's key (for example pressing the '0' key to apply the '0' register when it's open):
use {
  "tversteeg/registers.nvim",
  config = function()
    local registers = require("registers")
    registers.setup({
      bind_keys = {
        registers = registers.apply_register({ delay = 1 }),
      },
    })
  end
}
<

================================================================================
`registers.setup` configuration options.                               *options*

options                                                                *options*


register_mode                                                    *register_mode*

    Variants: ~



bind_keys_options                                            *bind_keys_options*
    | "insert" # Insert the register's contents like when in insert mode and pressing <C-R>.
    | "paste" # Insert the register's contents by pretending a pasting action, similar to pressing "*reg*p, cannot be used in insert mode.
    | "motion" # Create a motion from the register, similar to pressing "*reg* (without pasting it yet).


window_border                                                    *window_border*

    Variants: ~



window_options                                                  *window_options*
    | "none"
    | "single"
    | "double"
    | "rounded"
    | "solid"
    | "shadow"
    | string[] # An array of eight strings which each corner and side character.


symbols_options                                                *symbols_options*


sign_highlights_options                                *sign_highlights_options*


registers.default_options()                          *registers.default_options*
    Get the default values for all options.

    Returns: ~
        {options}  Default values for all options.


================================================================================
Functions                                                            *functions*

registers.setup({options})                                     *registers.setup*
    Let the user configure this plugin.

    This will also register the default user commands and key bindings.

    Parameters: ~
        {options}  (options?)  Plugin configuration options.

    Usage: ~
        >
            require("registers").setup({})
        <


callback_options                                              *callback_options*


show_window_options                                        *show_window_options*


registers.show_window({options})                         *registers.show_window*
    Popup the registers window.

    Parameters: ~
        {options}  (callback_options|show_window_options?)  Options for firing the callback.

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.

    Usage: ~
        >
            -- Disable all key bindings
            require("registers").setup({ bind_keys = false })

            -- Define a custom for opening the register window when pressing "r"
            vim.api.nvim_set_keymap("n", "r", "", {
                -- The "paste" argument means that when a register is selected it will automatically be pasted
                callback = require("registers").show_window({ mode = "paste" }),
                -- This is required for the registers window to function
                expr = true
            })
        <


registers.close_window({options})                       *registers.close_window*
    Close the window.

    Parameters: ~
        {options}  (callback_options?)  Options for firing the callback.

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.


apply_register_options                                  *apply_register_options*


registers.apply_register({options})                   *registers.apply_register*
    Apply the specified register.

    Parameters: ~
        {options}  (callback_options|apply_register_options?)  Options for firing the callback.

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.


registers.move_cursor_up({options})                   *registers.move_cursor_up*
    Move the cursor up in the window.

    Parameters: ~
        {options}  (callback_options?)  Options for firing the callback.

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.


registers.move_cursor_down({options})               *registers.move_cursor_down*
    Move the cursor down in the window.

    Parameters: ~
        {options}  (callback_options?)  Options for firing the callback.

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.


move_cursor_to_register_options                *move_cursor_to_register_options*


                                             *registers.move_cursor_to_register*
registers.move_cursor_to_register({options})
    Move the cursor to the specified register.

    Parameters: ~
        {options}  (callback_options|move_cursor_to_register_options)  Options for firing the callback.

    Returns: ~
        {function}  Function that can be used to pass to configuration options with callbacks.


vim:tw=78:ts=8:noet:ft=help:norl:
