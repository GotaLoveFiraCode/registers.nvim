registers                                                            *registers*


    Fields: ~
        {options}  (options)


================================================================================
Introduction                                                             *intro*

Registers.nvim is a minimal but very configurable Neovim plugin.

Almost everything can be configured using the mandatory `registers.setup({})` method.

`packer.nvim` minimal setup:
>
use {
  "tversteeg/registers.nvim",
  config = function()
    require("registers").setup()
  end
}
<

================================================================================
`registers.setup` configuration options.                               *options*

options                                                                *options*
    `require("registers").setup({...})`

    Fields: ~
        {show}                   (string)                     Which registers to show and in what order. Default is `"*+\"-/_=#%.0123456789abcdefghijklmnopqrstuvwxyz:"`.
        {show_empty}             (boolean)                    Show the registers which aren't filled in a separate line. Default is `true`.
        {delay}                  (number)                     How long, in seconds, to wait before opening the window. Default is `0`.
        {register_user_command}  (boolean)                    Whether to register the `:Registers` user command. Default is `true`.
        {system_clipboard}       (boolean)                    Transfer selected register to the system clipboard. Default is `true`.
        {trim_whitespace}        (boolean)                    Don't show whitespace at the begin and and of the registers, won't change the output from applying the register. Default is `true`.
        {hide_only_whitespace}   (boolean)                    Treat registers with only whitespace as empty registers. Default is `true`.
        {bind_keys}              (bind_keys_options|boolean)  Which keys to bind, `true` maps all keys and `false` maps no keys. Default is `true`.
        {symbols}                (symbols_options)            Symbols used to replace text in the previous buffer.
        {window}                 (window_options)             Floating window
        {sign_highlights}        (sign_highlights_options)    Highlights for the sign section of the window


register_mode                                                    *register_mode*


    Variants: ~
        ("insert")  Insert the register's contents like when in insert mode and pressing <C-R>.
        ("paste")   Insert the register's contents by pretending a pasting action, similar to pressing "*reg*p, cannot be used in insert mode.
        ("motion")  Create a motion from the register, similar to pressing "*reg* (without pasting it yet).


bind_keys_options                                            *bind_keys_options*
    `require("registers").setup({ bind_keys = {...} })`

    Fields: ~
        {normal}      (fun()|false)                               Function to map to " in normal mode to display the registers window, `false` to disable the binding. Default is `registers.show_motion_window`.
        {visual}      (fun()|false)                               Function to map to " in visual mode to display the registers window, `false` to disable the binding. Default is `registers.show_motion_window`.
        {insert}      (fun()|false)                               Function to map to <C-R> in insert mode to display the registers window, `false` to disable the binding. Default is `registers.show_insert_window`.
        {registers}   (fun(register:string?,mode:register_mode))  Function to map to the register selected by pressing it's key. Default is `registers.apply_register`.
        {return_key}  (fun(register:string?,mode:register_mode))  Function to map to <CR> in the window. Default is `registers.apply_register`.
        {escape}      (fun(register:string?,mode:register_mode))  Function to map to <ESC> in the window. Default is `registers.close_window`.
        {ctrl_n}      (fun()|false)                               Function to map <C-N> to move down in the registers window. Default is `registers.move_cursor_down`.
        {ctrl_p}      (fun()|false)                               Function to map <C-P> to move up in the registers window. Default is `registers.move_cursor_up`.
        {ctrl_j}      (fun()|false)                               Function to map <C-J> to move down in the registers window. Default is `registers.move_cursor_down`.
        {ctrl_k}      (fun()|false)                               Function to map <C-K> to move up in the registers window. Default is `registers.move_cursor_up`.


window_border                                                    *window_border*


    Variants: ~
        ("none")
        ("single")
        ("double")
        ("rounded")
        ("solid")
        ("shadow")
        (string[])   An array of eight strings which each corner and side character.


window_options                                                  *window_options*
    `require("registers").setup({ window = {...} })`

    Fields: ~
        {max_width}             (number?)         Maximum width of the window, normal size will be calculated based on the size of the longest register. Default is `100`.
        {highlight_cursorline}  (boolean?)        Whether to create key mappings for the register values inside the window. Default is `true`.
        {border}                (window_border?)  Border style of the window. Default is `"none"`.
        {transparency}          (integer?)        Transparency of the window, value can be between 0-100, 0 disables it. Default is `20`.


symbols_options                                                *symbols_options*
    `require("registers").setup({ symbols = {...} })`

    Fields: ~
        {newline}  (string?)  Symbol to show for a line break character, can not be the `"\\n"` symbol, use `"\\\\n"` (two backslashes) instead. Default is `"⏎"`.
        {space}    (string?)  Symbol to show for a space character. Default is `" "`.
        {tab}      (string?)  Symbol to show for a tab character. Default is `"·"`.


sign_highlights_options                                *sign_highlights_options*
    `require("registers").setup({ sign_highlights = {...} })`

    Fields: ~
        {cursorline}        (string?)  Highlight group for when the cursor is over the line. Default is `"Visual"`.
        {selection}         (string?)  Highlight group for the selection registers, `*+`. Default is `"Constant"`.
        {default}           (string?)  Highlight group for the default register, `"`. Default is `"Function"`.
        {unnamed}           (string?)  Highlight group for the unnamed register, `\\`. Default is `"Statement"`.
        {read_only}         (string?)  Highlight group for the read only registers, `:.%`. Default is `"Type"`.
        {alternate_buffer}  (string?)  Highlight group for the alternate buffer register, `#`. Default is `"Type"`.
        {expression}        (string?)  Highlight group for the expression register, `=`. Default is `"Exception"`.
        {black_hole}        (string?)  Highlight group for the black hole register, `_`. Default is `"Error"`.
        {last_search}       (string?)  Highlight group for the last search register, `/`. Default is `"Operator"`.
        {delete}            (string?)  Highlight group for the delete register, `-`. Default is `"Special"`.
        {yank}              (string?)  Highlight group for the yank register, `0`. Default is `"Delimiter"`.
        {history}           (string?)  Highlight group for the history registers, `1-9`. Default is `"Number"`.
        {named}             (string?)  Highlight group for the named registers, `a-z`. Default is `"Todo"`.


registers.default_options()                          *registers.default_options*
    Get the default values for all options.

    Returns: ~
        {options}  values for all options


================================================================================
Functions                                                            *functions*

registers.setup({options})                                     *registers.setup*
    Let the user configure this plugin.

    This will also register the default user commands and key bindings.

    Parameters: ~
        {options}  (options?)  Plugin configuration options.

    Usage: ~
        >
            require("registers").setup({})
        <


registers.show_window({mode})                            *registers.show_window*
    Popup the registers window.

    Parameters: ~
        {mode}  (register_mode?)  How the registers window should handle the selection of registers.

    Usage: ~
        >
            -- Disable all key bindings
            require("registers").setup({ bind_keys = false })

            -- Define a custom for opening the register window when pressing "r"
            vim.api.nvim_set_keymap("n", "r", "", {
                callback = function()
                    -- The "paste" argument means that when a register is selected it will automatically be pasted
                    return require("registers").show("paste")
                end,
                -- This is required for the registers window to function
                expr = true
            })
        <


registers.show_motion_window()                    *registers.show_motion_window*
    Popup the registers window which will create a motion from the selected register.

    Simple wrapper around `registers.show_window("motion")` so it can be easily used in configurations.


registers.show_paste_window()                      *registers.show_paste_window*
    Popup the registers window which will create a paste from the selected register.

    Simple wrapper around `registers.show_window("paste")` so it can be easily used in configurations.


registers.show_insert_window()                    *registers.show_insert_window*
    Popup the registers window which will create a insert from the selected register.

    Simple wrapper around `registers.show_window("insert")` so it can be easily used in configurations.


registers.close_window()                                *registers.close_window*
    Close the window.


                                                      *registers.apply_register*
registers.apply_register({register}, {mode})
    Apply the specified register.

    Parameters: ~
        {register}  (string?)         Which register to apply, when `nil` is used the current line of the window is used, with the prerequisite that the window is opened.
        {mode}      (register_mode?)  How the register should be applied.


registers.paste_register({register})                  *registers.paste_register*
    Paste the specified register.

    Simple wrapper around `registers.apply_register(.., "paste")` so it can be easily used in configurations.

    Parameters: ~
        {register}  (string?)  Which register to apply, when `nil` is used the current line of the window is used, with the prerequisite that the window is opened.


registers.motion_register({register})                *registers.motion_register*
    Create a motion from the specified register.

    Simple wrapper around `registers.apply_register(.., "motion")` so it can be easily used in configurations.

    Parameters: ~
        {register}  (string?)  Which register to apply, when `nil` is used the current line of the window is used, with the prerequisite that the window is opened.


registers.move_cursor_up()                            *registers.move_cursor_up*
    Move the cursor up in the window.


registers.move_cursor_down()                        *registers.move_cursor_down*
    Move the cursor down in the window.


vim:tw=78:ts=8:noet:ft=help:norl:
